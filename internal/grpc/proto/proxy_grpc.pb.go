// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.1
// source: proxy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProxyService_RequestIn_FullMethodName   = "/proxy.ProxyService/RequestIn"
	ProxyService_RequestMod_FullMethodName  = "/proxy.ProxyService/RequestMod"
	ProxyService_RequestOut_FullMethodName  = "/proxy.ProxyService/RequestOut"
	ProxyService_ResponseIn_FullMethodName  = "/proxy.ProxyService/ResponseIn"
	ProxyService_ResponseMod_FullMethodName = "/proxy.ProxyService/ResponseMod"
	ProxyService_ResponseOut_FullMethodName = "/proxy.ProxyService/ResponseOut"
	ProxyService_SetConfig_FullMethodName   = "/proxy.ProxyService/SetConfig"
	ProxyService_GetConfig_FullMethodName   = "/proxy.ProxyService/GetConfig"
)

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProxyService defines the gRPC service for client registration and communication.
type ProxyServiceClient interface {
	RequestIn(ctx context.Context, in *Register, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HttpRequest], error)
	RequestMod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RequestModClientMessage, HttpRequest], error)
	RequestOut(ctx context.Context, in *Register, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HttpRequest], error)
	ResponseIn(ctx context.Context, in *Register, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HttpResponse], error)
	ResponseMod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResponseModClientMessage, HttpResponse], error)
	ResponseOut(ctx context.Context, in *Register, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HttpResponse], error)
	SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Null, error)
	GetConfig(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Config, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) RequestIn(ctx context.Context, in *Register, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HttpRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[0], ProxyService_RequestIn_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Register, HttpRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_RequestInClient = grpc.ServerStreamingClient[HttpRequest]

func (c *proxyServiceClient) RequestMod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RequestModClientMessage, HttpRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[1], ProxyService_RequestMod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RequestModClientMessage, HttpRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_RequestModClient = grpc.BidiStreamingClient[RequestModClientMessage, HttpRequest]

func (c *proxyServiceClient) RequestOut(ctx context.Context, in *Register, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HttpRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[2], ProxyService_RequestOut_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Register, HttpRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_RequestOutClient = grpc.ServerStreamingClient[HttpRequest]

func (c *proxyServiceClient) ResponseIn(ctx context.Context, in *Register, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HttpResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[3], ProxyService_ResponseIn_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Register, HttpResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_ResponseInClient = grpc.ServerStreamingClient[HttpResponse]

func (c *proxyServiceClient) ResponseMod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResponseModClientMessage, HttpResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[4], ProxyService_ResponseMod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResponseModClientMessage, HttpResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_ResponseModClient = grpc.BidiStreamingClient[ResponseModClientMessage, HttpResponse]

func (c *proxyServiceClient) ResponseOut(ctx context.Context, in *Register, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HttpResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[5], ProxyService_ResponseOut_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Register, HttpResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_ResponseOutClient = grpc.ServerStreamingClient[HttpResponse]

func (c *proxyServiceClient) SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Null, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Null)
	err := c.cc.Invoke(ctx, ProxyService_SetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) GetConfig(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Config)
	err := c.cc.Invoke(ctx, ProxyService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations must embed UnimplementedProxyServiceServer
// for forward compatibility.
//
// ProxyService defines the gRPC service for client registration and communication.
type ProxyServiceServer interface {
	RequestIn(*Register, grpc.ServerStreamingServer[HttpRequest]) error
	RequestMod(grpc.BidiStreamingServer[RequestModClientMessage, HttpRequest]) error
	RequestOut(*Register, grpc.ServerStreamingServer[HttpRequest]) error
	ResponseIn(*Register, grpc.ServerStreamingServer[HttpResponse]) error
	ResponseMod(grpc.BidiStreamingServer[ResponseModClientMessage, HttpResponse]) error
	ResponseOut(*Register, grpc.ServerStreamingServer[HttpResponse]) error
	SetConfig(context.Context, *Config) (*Null, error)
	GetConfig(context.Context, *Null) (*Config, error)
	mustEmbedUnimplementedProxyServiceServer()
}

// UnimplementedProxyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProxyServiceServer struct{}

func (UnimplementedProxyServiceServer) RequestIn(*Register, grpc.ServerStreamingServer[HttpRequest]) error {
	return status.Errorf(codes.Unimplemented, "method RequestIn not implemented")
}
func (UnimplementedProxyServiceServer) RequestMod(grpc.BidiStreamingServer[RequestModClientMessage, HttpRequest]) error {
	return status.Errorf(codes.Unimplemented, "method RequestMod not implemented")
}
func (UnimplementedProxyServiceServer) RequestOut(*Register, grpc.ServerStreamingServer[HttpRequest]) error {
	return status.Errorf(codes.Unimplemented, "method RequestOut not implemented")
}
func (UnimplementedProxyServiceServer) ResponseIn(*Register, grpc.ServerStreamingServer[HttpResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ResponseIn not implemented")
}
func (UnimplementedProxyServiceServer) ResponseMod(grpc.BidiStreamingServer[ResponseModClientMessage, HttpResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ResponseMod not implemented")
}
func (UnimplementedProxyServiceServer) ResponseOut(*Register, grpc.ServerStreamingServer[HttpResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ResponseOut not implemented")
}
func (UnimplementedProxyServiceServer) SetConfig(context.Context, *Config) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedProxyServiceServer) GetConfig(context.Context, *Null) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedProxyServiceServer) mustEmbedUnimplementedProxyServiceServer() {}
func (UnimplementedProxyServiceServer) testEmbeddedByValue()                      {}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedProxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_RequestIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Register)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyServiceServer).RequestIn(m, &grpc.GenericServerStream[Register, HttpRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_RequestInServer = grpc.ServerStreamingServer[HttpRequest]

func _ProxyService_RequestMod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).RequestMod(&grpc.GenericServerStream[RequestModClientMessage, HttpRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_RequestModServer = grpc.BidiStreamingServer[RequestModClientMessage, HttpRequest]

func _ProxyService_RequestOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Register)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyServiceServer).RequestOut(m, &grpc.GenericServerStream[Register, HttpRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_RequestOutServer = grpc.ServerStreamingServer[HttpRequest]

func _ProxyService_ResponseIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Register)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyServiceServer).ResponseIn(m, &grpc.GenericServerStream[Register, HttpResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_ResponseInServer = grpc.ServerStreamingServer[HttpResponse]

func _ProxyService_ResponseMod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).ResponseMod(&grpc.GenericServerStream[ResponseModClientMessage, HttpResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_ResponseModServer = grpc.BidiStreamingServer[ResponseModClientMessage, HttpResponse]

func _ProxyService_ResponseOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Register)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyServiceServer).ResponseOut(m, &grpc.GenericServerStream[Register, HttpResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProxyService_ResponseOutServer = grpc.ServerStreamingServer[HttpResponse]

func _ProxyService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).SetConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).GetConfig(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _ProxyService_SetConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ProxyService_GetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestIn",
			Handler:       _ProxyService_RequestIn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RequestMod",
			Handler:       _ProxyService_RequestMod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RequestOut",
			Handler:       _ProxyService_RequestOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ResponseIn",
			Handler:       _ProxyService_ResponseIn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ResponseMod",
			Handler:       _ProxyService_ResponseMod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ResponseOut",
			Handler:       _ProxyService_ResponseOut_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proxy.proto",
}
